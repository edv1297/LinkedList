// Implementation of lists, using doubly linked elements, and dummy nodes.

/**
*
* Created by Eddy Varela 03/08/2017
*
*/

import structure5.*;
import java.util.Iterator;

public class LinkedList<E> extends DoublyLinkedList<E>
{
  // Number of elements within the list.
  protected int count;
  /*
  * Reference to head and tail of the list.
  */
  protected DoublyLinkedNode<E> head;
  protected DoublyLinkedNode<E> tail;

  /**
  * Constructs an empty list.
  * head and tail are null because they do not
  * count as elements in the array rather they are
  * signifiers of the beginning or end of the LinkedList
  */

  public LinkedList()
  {
    head = new DoublyLinkedNode<E>(null,tail,null);
    tail = new DoublyLinkedNode<E>(null, null, head);
    count=0;
  }
  /**
  * Determine the number of elements in the list.
  *
  * @post returns the number of elements in list
  *
  * @return The number of elements found in the list.
  */
  public int size()
  {
    return count;
  }

  /**
  * Determine if the list is empty.
  * @post returns true iff the list has no elements.
  * @return True iff list has no values.
  */
  public boolean isEmpty()
  {
    return size() == 0;
  }
  /**
  * Remove all values from list.
  * @post removes all the elements from the list
  */
  public void clear()
  {
    // create a pointer that walks through the List and removes each element
    head.setNext(tail);
    tail.setPrevious(head);
  }
  /**
  * A private routine to add an element after a node.
  * @param value the value to be added
  * @param previous the node the come before the one holding value
  * @pre previous is non null
  * @post list contains a node following previous that contains value
  */
  protected void insertAfter(E value, DoublyLinkedNode<E> previous){

    DoublyLinkedNode<E> node =
    new DoublyLinkedNode<E>(value,previous.next(),previous);

    previous.setNext(node);
    previous.next().setPrevious(node);

  }

  /**
  * A private routine to remove a node.
  * @param node the node to be removed
  * @pre node is non null
  * @post node node is removed from the list
  * @return the value of the node removed
  */
  protected E remove(DoublyLinkedNode<E> node)
  {

    node.previous().setNext(node.next());
    node.next().setPrevious(node.previous());

    return node.value();
  }
  /**
  * Add a value to the head of the list.
  *
  * @pre value is not null
  * @post adds element to head of list
  *
  */

  public void addFirst(E value)
  {
    // construct a new element, inserting it after the head
    DoublyLinkedNode<E> n =
    new DoublyLinkedNode<E>(value, head.next(), head);
    head.next().next().setPrevious(n);
    head.setNext(n);

    count++;
  }

  /**
  * Add a value to the tail of the list.
  *
  * @pre value is not null
  * @post adds new value to tail of list
  *
  * @param value The value to be added.
  */
  public void addLast(E value)
  {
    // construct new node and add the node at the location of count.
    DoublyLinkedNode<E> n = new DoublyLinkedNode<E>(value, tail, tail.previous());
    tail.previous().previous().setNext(n);
    tail.setPrevious(n);

    count++;
  }

  /**
  * Value is returned.
  *
  * @pre list is not empty
  * @post removes first value from list
  *
  * @return The value removed from the list.
  */

  public E removeFirst()
  {
    //this will change the liks between the head node and will link to the second
    //element in the List and then that node will point to the head making it
    //the new first element in the list.

    Assert.pre(!isEmpty(),"List is not empty.");
    DoublyLinkedNode<E> n = head.next();

    head.setNext(n.next());
    n.next().setPrevious(head);

    count--;
    return n.value();
  }

  /**
  * Remove a value from the tail of the list.
  *
  * @pre list is not empty
  * @post removes value from tail of list
  *
  * @return The value removed from the list.
  */
  public E removeLast()
  {
    //Similiar to the removeFirst method, what we want to do here is to change the
    //previous links of the tail node to the one before the last node and then make
    //that node point to the tail, then Java collects the "pointer.previous() node".

    Assert.pre(!isEmpty(),"List is not empty.");
    DoublyLinkedNode<E> n  = tail.previous();

    tail.setPrevious(n.previous());
    n.previous().setNext(tail);

    count--;

    return n.previous().value();
  }

  /**
  * Get a copy of the first value found in the list.
  *
  * @pre list is not empty
  * @post returns first value in list.
  *
  * @return A reference to first value in list.
  */
  public E getFirst()
  {
    Assert.pre(!isEmpty(), "List is not empty");
    return head.next().value();
  }

  /**
  * Get a copy of the last value found in the list.
  *
  * @pre list is not empty
  * @post returns last value in list.
  *
  * @return A reference to the last value in the list.
  */
  public E getLast()
  {
    Assert.pre(!isEmpty(), "List is not empty");
    return tail.previous().value();
  }

  /**
  * Insert the value at location.
  *
  * @pre 0 <= i <= size()
  * @post adds the ith entry of the list to value o
  * @param i the index of this new value
  * @param o the the value to be stored
  */
  public void add(int i, E o){

    Assert.pre((0 <= i) &&
    (i <= size()), "Index in range.");
    if (i == 0) addFirst(o);
    else if (i == size()) addLast(o);
    else {
      DoublyLinkedNode<E> pointer = head;
      // search for ith position, or end of list
      while (i > 0)
      {
        pointer = pointer.next();
        i--;
      }
      //call the insertAfter and let it handle the creation of a new node
      insertAfter(o, pointer);
      count++;
    }
  }

  /**
  * Remove and return the value at location i.
  *
  * @pre 0 <= i < size()
  * @post removes and returns the object found at that location.
  *
  * @param i the position of the value to be retrieved.
  * @return the value retrieved from location i (returns null if i invalid)
  */
  public E remove(int i)
  {
    E result = null;
    Assert.pre((0 <= i) &&
    (i < size()), "Index in range.");
    if(i==0){
      result = head.next().value();
      return removeFirst();
}
    if(i == size()-1){
        result = tail.previous().value();
        return removeLast();

}
    else{
      DoublyLinkedNode <E> n = head.next();
      while(i>0){
        n=n.next();
        i--;
      }
      n.previous().setNext(n.next());
      n.next().setPrevious(n.previous());
      return n.value();
      }
}

  /**
  * Get the value at location i.
  *
  * @pre 0 <= i < size()
  * @post returns the object found at that location.
  *
  * @param i the position of the value to be retrieved.
  * @return the value retrieved from location i (returns null if i invalid)
  */
  public E get(int i)
  {
    // Students: modify this code.
    if (i >= size()) return null;
    else if (i==0) return getFirst();

    DoublyLinkedNode<E> pointer = head;
    // search for the ith element or end of list
    while (i > 0)
    {
      pointer = pointer.next();
      i--;
    }
    // not end of list, return the value found
    return pointer.value();
  }
  /**
  * Set the value stored at location i to object o, returning the old value.
  *
  * @pre 0 <= i < size()
  * @post sets the ith entry of the list to value o, returns the old value.
  * @param i the location of the entry to be changed.
  * @param o the new value
  * @return the former value of the ith entry of the list.
  */
  public E set(int i, E o) {

    DoublyLinkedNode<E> pointer;
    if (i >= size()){
      return null;
    }
    //if the size is contained in the list create a new node

    else if(i == 0){
      pointer=head.next();
      E e = pointer.value();
      pointer.setValue(o);
      return e;
    }
    else if (i==size()-1){
      pointer = tail.previous();
      E n = pointer.value();
      pointer.previous().setPrevious(pointer.next());
      pointer.next().setPrevious(pointer.previous());
      pointer.setValue(o);
      return n;
    }
    // search for the ith element or the end of the list
    pointer = head.next();
    while (i > 0)
    {
      pointer.previous().setPrevious(pointer.next());
      pointer.next().setPrevious(pointer.previous());
      pointer = pointer.next();
      --i;
    }
    // get old value, update new value
    E result = pointer.value();
    pointer.previous().setPrevious(pointer.next());
    pointer.next().setPrevious(pointer.previous());
    pointer.setValue(o);
    return result;
  }


  /**
  * Determine the first location of a value in the list.
  *
  * @pre value is not null
  * @post returns the (0-origin) index of the value,
  *   or -1 if the value is not found
  *
  * @param value The value sought.
  * @return the index (0 is the first element) of the value, or -1
  */

  public int indexOf(E value)
  {
    int i = 0;
    DoublyLinkedNode<E> pointer = head.next();
    // search for value or end of list, counting along the way
    while (pointer != tail && !pointer.value().equals(value))
    {
      pointer = pointer.next();
      i++;
    }
    // pointer points to value, i is index
    if (pointer == null)
    {   // value not found, return indicator
      return -1;
    } else {
      // value found, return index
      return i;
    }
  }
  /**
  * Determine the last location of a value in the list.
  *
  * @pre value is not null
  * @post returns the (0-origin) index of the value,
  *   or -1 if the value is not found
  *
  * @param value the value sought.
  * @return the index (0 is the first element) of the value, or -1
  */
  public int lastIndexOf(E value){
    Assert.pre(!isEmpty(),"List is not empty.");
    int i = count-1;
    System.out.println("Size: "i);
    DoublyLinkedNode<E> pointer = tail.previous();

    // search for the last matching value, result is desired index
    while (pointer != head  && !pointer.value().equals(value))
    {
      pointer = pointer.previous();
      i--;
    }
    if(pointer.value().equals(value) && ){
      return i;
    }
    else{
      return -1;
    }
  }

  /**
  * Check to see if a value is within the list.
  *
  * @pre value not null
  * @post returns true iff value is in the list
  *
  * @param value A value to be found in the list.
  * @return True if value is in list.
  */
  public boolean contains(E value)
  {
    return (indexOf(value)>=0);
  }

  /**
  * Remove a value from the list.  At most one value is removed.
  * Any duplicates remain.  Because comparison is done with "equals,"
  * the actual value removed is returned for inspection.
  *
  * @pre value is not null.  List can be empty.
  * @post first element matching value is removed from list
  *
  * @param value The value to be removed.
  * @return The value actually removed.
  */

  public E remove(E value)
  {
    Assert.pre(!isEmpty(),"List is not empty.");

    DoublyLinkedNode<E> pointer = head.next();
    E element = null;

    for(int i =0 ; i< count-1; ++i){
      if(pointer.value().equals(value)){
        element = pointer.value();

        pointer.previous().setNext(pointer.next());
        pointer.next().setPrevious(pointer.previous());

        break;
      }
      pointer = pointer.next();
    }
    return element;
  }


  /**
  * Construct an iterator to traverse the list.
  *
  * @post returns iterator that allows the traversal of list.
  *
  * @return An iterator that traverses the list from head to tail.
  */
  public Iterator<E> iterator()
  {
    // Students: This code should not be modified
    return new DoublyLinkedListIterator<E>(head,tail);
  }

  /**
  * Construct a string representation of the list.
  *
  * @post returns a string representing list
  *
  * @return A string representing the elements of the list.
  */
  public String toString()
  {
    StringBuffer s = new StringBuffer();
    s.append("<LinkedList:");
    Iterator<E> li = iterator();
    while (li.hasNext())
    {
      s.append(" "+li.next());
    }
    s.append(">");
    return s.toString();
  }
}
